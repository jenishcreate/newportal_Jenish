@using Newtonsoft.Json
@using newportal.Models.ViewModel
@{    
    
    var modelJson = TempData["User_Data"]?.ToString();
    var inputo = !string.IsNullOrEmpty(modelJson)
        ? JsonConvert.DeserializeObject<UserData>
    (modelJson)
    : null;
    }


<div class="card">
    <div class="card-body">
        <h5>Profile</h5>
        <div class="d-flex align-items-center gap-4 pb-4 border-bottom">
            <img src="@inputo.ProfilePicture" alt="Profile" class="rounded-circle" width="100" height="100" id="uploadedAvatar" />
            <div>
                <label for="upload" class="btn btn-primary me-2 mb-2">
                    Upload new photo
                    <input type="file" id="upload" hidden accept="image/*" />
                </label>
                <button type="button" class="btn btn-outline-secondary mb-2" id="resetProfileImage">Reset</button>
                <div class="text-muted">Allowed JPG, PNG, GIF. Max size 800KB.</div>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const uploadInput = document.getElementById("upload");
        const avatarImg = document.getElementById("uploadedAvatar");
        const resetButton = document.getElementById("resetProfileImage");
        const originalSrc = avatarImg.src;

        uploadInput.addEventListener("change", function () {
            const file = this.files[0];
            if (!file) return;

            // Validate type
            const allowedTypes = ["image/jpeg", "image/png", "image/gif"];
            if (!allowedTypes.includes(file.type)) {
                alert("Only JPG, PNG, or GIF allowed.");
                this.value = "";
                return;
            }

            // Validate size (max 800KB)
            if (file.size > 800 * 1024) {
                alert("File size must be less than 800KB.");
                this.value = "";
                return;
            }

            // Preview image instantly
            const reader = new FileReader();
            reader.onload = function (e) {
                avatarImg.src = e.target.result;
            };
            reader.readAsDataURL(file);

            // Prepare form data
            const formData = new FormData();
            formData.append("profileImage", file);

            // Try to get anti-forgery token if exists
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            const headers = {};
            if (tokenInput) {
                headers["RequestVerificationToken"] = tokenInput.value;
            }

            // Send to server
            fetch("/Setting/UploadProfilePicture", {
                method: "POST",
                headers: headers,
                body: formData
            })
            .then(response => {
                if (response.ok) return response.json();
                throw new Error("Upload failed.");
            })
            .then(data => {
                if (data.success) {
                    avatarImg.src = data.imageUrl;
                    alert("Profile picture updated successfully.");
                } else {
                    throw new Error(data.message || "Unknown error.");
                }
            })
            .catch(error => {
                alert("Error: " + error.message);
                avatarImg.src = originalSrc;
                this.value = ""; // reset file input
            });
        });

        resetButton.addEventListener("click", function () {
            avatarImg.src = originalSrc;
            uploadInput.value = "";
        });
    });
</script>

